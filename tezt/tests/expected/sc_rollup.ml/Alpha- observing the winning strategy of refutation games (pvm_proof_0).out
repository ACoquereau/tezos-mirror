
./tezos-client --wait none originate sc rollup from '[PUBLIC_KEY_HASH]' of kind arith of type unit booting with  --burn-cap 9999999
Node is bootstrapped.
Estimated gas: 2509.140 units (will add 100 for safety)
Estimated storage: 6626 bytes added (will add 20 for safety)
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000614
    Expected counter: 1
    Gas limit: 2610
    Storage limit: 6646 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000614
      payload fees(the block proposer) ....... +ꜩ0.000614
    Originate smart contract rollup of kind arith and type unit with boot sector ''
      This smart contract rollup origination was successfully applied
      Consumed gas: 2509.140
      Storage size: 6626 bytes
      Address: [SC_ROLLUP_HASH]
      Genesis commitment hash: [SC_ROLLUP_COMMITMENT_HASH]
      Balance updates:
        [PUBLIC_KEY_HASH] ... -ꜩ1.6565
        storage fees ........................... +ꜩ1.6565


./tezos-client --wait none send sc rollup message 'text:["3 3 +","1","1 1 x","3 7 8 + * y","2 2 out"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1653.895 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 2
    Gas limit: 1754
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.023
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 3
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 5
                                nb_messages_in_commitment_period = 5
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 1
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                }


./tezos-client --wait none send sc rollup message 'text:["1","3 3 +","1 1 x","3 7 8 + * y","2 2 out"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.245 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 3
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.245
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 5
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 10
                                nb_messages_in_commitment_period = 10
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 2
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                }


./tezos-client --wait none send sc rollup message 'text:["1","1 1 x","3 3 +","3 7 8 + * y","2 2 out"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.324 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 4
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.324
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 7
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 15
                                nb_messages_in_commitment_period = 15
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 3
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                }


./tezos-client --wait none send sc rollup message 'text:["1","1 1 x","3 7 8 + * y","3 3 +","2 2 out"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.467 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 5
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.467
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 9
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 20
                                nb_messages_in_commitment_period = 20
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 4
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                }


./tezos-client --wait none send sc rollup message 'text:["1","1 1 x","3 7 8 + * y","2 2 out","3 3 +"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.531 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 6
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.531
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 11
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 25
                                nb_messages_in_commitment_period = 25
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 5
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                }


./tezos-client --wait none send sc rollup message 'text:["1","1 1 x","3 7 8 + * y","2 2 out","3 3 +"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.546 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 7
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.546
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 13
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 30
                                nb_messages_in_commitment_period = 30
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 6
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                }


./tezos-client --wait none send sc rollup message 'text:["1","1 1 x","3 7 8 + * y","2 2 out","3 3 +"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.546 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 8
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.546
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 15
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 35
                                nb_messages_in_commitment_period = 35
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 7
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                }


./tezos-client --wait none send sc rollup message 'text:["1","1 1 x","3 7 8 + * y","2 2 out","3 3 +"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.674 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 9
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.674
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 17
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 40
                                nb_messages_in_commitment_period = 40
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 8
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                }


./tezos-client --wait none send sc rollup message 'text:["1","1 1 x","3 7 8 + * y","2 2 out","3 3 +"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.738 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 10
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.738
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 19
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 45
                                nb_messages_in_commitment_period = 45
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 9
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                }


./tezos-client --wait none send sc rollup message 'text:["1","1 1 x","3 7 8 + * y","2 2 out","3 3 +"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.753 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000494
    Expected counter: 11
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000494
      payload fees(the block proposer) ....... +ꜩ0.000494
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.753
      Resulting inbox state : { rollup = [SC_ROLLUP_HASH]
                                level = 21
                                current messages hash  = [SC_ROLLUP_INBOX_HASH]
                                nb_available_messages = 50
                                nb_messages_in_commitment_period = 50
                                starting_level_of_current_commitment_period = 2
                                message_counter = 5
                                old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                      content = [SC_ROLLUP_INBOX_HASH]
                                                        index = 10
                                                        back_pointers = 
                                                        [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                                          [SC_ROLLUP_INBOX_HASH]
                                }

