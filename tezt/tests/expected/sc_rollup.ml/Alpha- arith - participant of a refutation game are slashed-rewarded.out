
./octez-client --wait none originate sc rollup from bootstrap1 of kind arith of type string booting with  --burn-cap 9999999
Node is bootstrapped.
Estimated gas: 2709.909 units (will add 100 for safety)
Estimated storage: 6520 bytes added (will add 20 for safety)
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  octez-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000629
    Expected counter: 1
    Gas limit: 2810
    Storage limit: 6540 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000629
      payload fees(the block proposer) ....... +ꜩ0.000629
    Smart contract rollup origination:
      Kind: arith
      Parameter type: string
      Boot sector Blake2B hash: '0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8'
      This smart contract rollup origination was successfully applied
      Consumed gas: 2709.909
      Storage size: 6520 bytes
      Address: [SC_ROLLUP_HASH]
      Genesis commitment hash: [SC_ROLLUP_COMMITMENT_HASH]
      Balance updates:
        [PUBLIC_KEY_HASH] ... -ꜩ1.63
        storage fees ........................... +ꜩ1.63


./octez-client --wait none publish commitment from '[PUBLIC_KEY_HASH]' for sc rollup '[SC_ROLLUP_HASH]' with compressed state '[SC_ROLLUP_PVM_STATE_HASH]' at inbox level 4 and predecessor '[SC_ROLLUP_COMMITMENT_HASH]' and number of ticks 1
Node is bootstrapped.
Estimated gas: 6241.735 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  octez-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000976
    Expected counter: 1
    Gas limit: 6342
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000976
      payload fees(the block proposer) ....... +ꜩ0.000976
    Smart contract rollup commitment publishing:
      Address: [SC_ROLLUP_HASH]
      Commitment:
        compressed_state: [SC_ROLLUP_PVM_STATE_HASH]
        inbox_level: 4
        predecessor: [SC_ROLLUP_COMMITMENT_HASH]
        number_of_ticks: 1
      This smart contract rollup commitment publishing was successfully applied
      Consumed gas: 6241.735
      Hash of commit: [SC_ROLLUP_COMMITMENT_HASH]
      Commitment published at level: 5
      Balance updates:
        [PUBLIC_KEY_HASH] ....................................................... -ꜩ10000
        Frozen_bonds([PUBLIC_KEY_HASH],[SC_ROLLUP_HASH]) ... +ꜩ10000


./octez-client --wait none publish commitment from '[PUBLIC_KEY_HASH]' for sc rollup '[SC_ROLLUP_HASH]' with compressed state '[SC_ROLLUP_PVM_STATE_HASH]' at inbox level 4 and predecessor '[SC_ROLLUP_COMMITMENT_HASH]' and number of ticks 2
Node is bootstrapped.
Estimated gas: 6241.727 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  octez-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000976
    Expected counter: 1
    Gas limit: 6342
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000976
      payload fees(the block proposer) ....... +ꜩ0.000976
    Smart contract rollup commitment publishing:
      Address: [SC_ROLLUP_HASH]
      Commitment:
        compressed_state: [SC_ROLLUP_PVM_STATE_HASH]
        inbox_level: 4
        predecessor: [SC_ROLLUP_COMMITMENT_HASH]
        number_of_ticks: 2
      This smart contract rollup commitment publishing was successfully applied
      Consumed gas: 6241.727
      Hash of commit: [SC_ROLLUP_COMMITMENT_HASH]
      Commitment published at level: 6
      Balance updates:
        [PUBLIC_KEY_HASH] ....................................................... -ꜩ10000
        Frozen_bonds([PUBLIC_KEY_HASH],[SC_ROLLUP_HASH]) ... +ꜩ10000


./octez-client --wait none timeout dispute on sc rollup '[SC_ROLLUP_HASH]' with '[PUBLIC_KEY_HASH]' from bootstrap1
Node is bootstrapped.
Estimated gas: 6460.928 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  octez-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000964
    Expected counter: 2
    Gas limit: 6561
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000964
      payload fees(the block proposer) ....... +ꜩ0.000964
    Smart contract rollup refutation timeout:
      Address: [SC_ROLLUP_HASH]
      First staker (Alice): [PUBLIC_KEY_HASH]
      Second staker (Bob): [PUBLIC_KEY_HASH]
      This smart contract rollup refutation timeout was successfully applied
      Consumed gas: 6460.928
      Refutation game status: Game ended: [PUBLIC_KEY_HASH] lost because: timeout
      Balance updates:
        Frozen_bonds([PUBLIC_KEY_HASH],[SC_ROLLUP_HASH]) ... -ꜩ10000
        sc rollup refutation punishments ........................................................... +ꜩ10000
        sc rollup refutation rewards ............................................................... -ꜩ5000
        [PUBLIC_KEY_HASH] ....................................................... +ꜩ5000

