sc_rollup_commitment_of_rollup_node_no_commitment_publish_before_lcc.out

./tezos-client --wait none originate sc rollup from '[PUBLIC_KEY_HASH]' of kind arith of type unit booting with  --burn-cap 9999999
Node is bootstrapped.
Estimated gas: 1800.796 units (will add 100 for safety)
Estimated storage: 6540 bytes added (will add 20 for safety)
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000428
    Expected counter: 1
    Gas limit: 1901
    Storage limit: 6560 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000428
      payload fees(the block proposer) ....... +ꜩ0.000428
    Originate smart contract rollup of kind arith and type unit with boot sector ''
      This smart contract rollup origination was successfully applied
      Consumed gas: 1800.796
      Storage size: 6540 bytes
      Address: [SC_ROLLUP_HASH]
      Balance updates:
        [PUBLIC_KEY_HASH] ... -ꜩ1.635
        storage fees ........................... +ꜩ1.635


./tezos-client rpc get '/chains/main/blocks/head/context/sc_rollup/[SC_ROLLUP_HASH]/initial_level'
2

./tezos-sc-rollup-client-alpha rpc get /last_stored_commitment
{ "commitment":
    { "compressed_state":
        "scs11VNjWyZw4Tgbvsom8epQbox86S2CKkE1UAZkXMM7Pj8MQMLzMf",
      "inbox_level": 32,
      "predecessor": "[SC_ROLLUP_COMMITMENT_HASH]",
      "number_of_messages": 0, "number_of_ticks": 0 },
  "hash": "[SC_ROLLUP_COMMITMENT_HASH]" }

./tezos-sc-rollup-client-alpha rpc get /last_published_commitment
{ "commitment":
    { "compressed_state":
        "scs11VNjWyZw4Tgbvsom8epQbox86S2CKkE1UAZkXMM7Pj8MQMLzMf",
      "inbox_level": 32,
      "predecessor": "[SC_ROLLUP_COMMITMENT_HASH]",
      "number_of_messages": 0, "number_of_ticks": 0 },
  "hash": "[SC_ROLLUP_COMMITMENT_HASH]",
  "published_at_level": 35 }

./tezos-client --wait none cement commitment '[SC_ROLLUP_COMMITMENT_HASH]' from bootstrap1 for sc rollup '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 3451.196 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000653
    Expected counter: 3
    Gas limit: 3552
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000653
      payload fees(the block proposer) ....... +ꜩ0.000653
    Cement the commitment [SC_ROLLUP_COMMITMENT_HASH] in the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation cementing a commitment on a smart contract rollup was successfully applied
      Consumed gas: 3451.196


./tezos-sc-rollup-client-alpha rpc get /last_published_commitment
null

./tezos-sc-rollup-client-alpha rpc get /last_stored_commitment
{ "commitment":
    { "compressed_state":
        "scs11VNjWyZw4Tgbvsom8epQbox86S2CKkE1UAZkXMM7Pj8MQMLzMf",
      "inbox_level": 32,
      "predecessor": "[SC_ROLLUP_COMMITMENT_HASH]",
      "number_of_messages": 0, "number_of_ticks": 0 },
  "hash": "[SC_ROLLUP_COMMITMENT_HASH]" }

./tezos-sc-rollup-client-alpha rpc get /last_published_commitment
{ "commitment":
    { "compressed_state":
        "scs11VNjWyZw4Tgbvsom8epQbox86S2CKkE1UAZkXMM7Pj8MQMLzMf",
      "inbox_level": 62,
      "predecessor": "[SC_ROLLUP_COMMITMENT_HASH]",
      "number_of_messages": 0, "number_of_ticks": 0 },
  "hash": "[SC_ROLLUP_COMMITMENT_HASH]",
  "published_at_level": 65 }
